<?php
/**
 * Created by PhpStorm.
 * User: PanChaoZhi
 * Date: 2017/1/28
 * Time: 21:27
 */

namespace frontend\models;


use common\models\Post;
use common\models\RelationPostTag;
use common\models\User;
use yii\base\Model;
use yii\db\Exception;
use yii\db\Query;

class PostForm extends Model
{
    public $id;
    public $title;
    public $content;
    public $label_img;
    public $cate_id;
    public $tags;

    public $_lastError = "";

    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';

    const EVENT_AFTER_CREATE = 'eventAfterCreate';
    const EVENT_AFTER_UPDATE = 'eventAfterUpdate';

    public function scenarios()
    {
        $scenarios = [
            self::SCENARIO_CREATE => ['title', 'label_img', 'content', 'cate_id', 'tags'],
            self::SCENARIO_UPDATE => ['title', 'label_img', 'content', 'cate_id', 'tags'],
        ];
        return array_merge(parent::scenarios(), $scenarios); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [['id', 'title', 'content', 'cate_id'], 'required'],
            [['id', 'cate_id'], 'integer'],
            ['title', 'string', 'min' => 4, 'max' => 50],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => '编号',
            'title' => '标题',
            'content' => '内容',
            'label_img' => '标签图',
            'cate_id' => '请选择分类',
            'tags' => '标签',
        ];
    }

    public function create()
    {
        $transaction = \Yii::$app->db->beginTransaction();

        try {
            $model = new Post();
            $model->setAttributes($this->attributes);
            $model->summary = $this->_getSummary();
            $model->user_id = \Yii::$app->user->identity->id;
            $model->user_name = \Yii::$app->user->identity->username;
            $model->is_valid = Post::IS_VALID;
            $model->created_at = time();
            $model->updated_at = time();
            $model->ip_address = \Yii::$app->request->getUserIP();

            $user = User::findOne(\Yii::$app->user->id);
            /*if (time() - ($user->last_post < 45)) {
                return false;
            }*/
            $user->last_post = time();
            $user->save();
            $model->signature = $user->signature;
            $model->nickname = $user->nickname;

            if (!$model->save()) {
                throw new Exception('文章创建失败');
            }

            $this->id = $model->id;

            $data = array_merge($this->getAttributes(), $model->getAttributes());
            $this->eventAfterCreate($data);
            $transaction->commit();
            return true;
        } catch (Exception $e) {
            $transaction->rollBack();
            $this->errors = $e->getMessage();
            return false;
        }
    }

    public function _getSummary($s = 0, $e = 90, $char = "utf-8")
    {
        if (empty($this->content)) {
            return null;
        }

        return (mb_substr(str_replace('&nbsp;', '', strip_tags($this->content)), $s, $e, $char));
    }

    public function eventAfterCreate($data)
    {
        $this->on(self::EVENT_AFTER_CREATE, [$this, '_eventAddTag'], $data);
        $this->trigger(self::EVENT_AFTER_CREATE);
    }

    public function _eventAddTag($event)
    {
        $tag = new TagForm();
        $tag->tags = $event->data['tags'];
        $tagids = $tag->saveTags();

        $rows = [];
        if (!empty($tagids)) {
            foreach ($tagids as $k => $id) {
                $rows[$k]['post_id'] = $this->id;
                $rows[$k]['tag_id'] = $id;
            }

            $res = (new Query())->createCommand()
                ->batchInsert(RelationPostTag::tableName(), ['post_id', 'tag_id'], $rows)
                ->execute();
            if (!$res) {
                throw new Exception('关联关系保存失败!');
            }
        }
    }

    public function getViewById($id)
    {
        //获取标签、标题、作者、分类、内容
        $result = Post::find()->with('cate', 'user', 'relationPostTags.tag')->where(['id' => $id])->asArray()->one();
        //zhi($result);

        //zhi($result['relationPostTags']);
        if (!$result) {
            throw new Exception("文章不存在！");
        }

        $result['tags'] = [];
        if (isset($result['relationPostTags']) && !empty($result['relationPostTags'])) {
            foreach ($result['relationPostTags'] as $list) {
                $result['tags'][] = $list['tag']['tag_name'];
            }
        }

        //zhi($result['tags']);
        unset($result['relationPostTags']);

        return $result;
        //zhi($result);
    }

    public static function getList($cond, $curPage = 1, $pageSize = 10, $orderBy = ['id' => SORT_DESC])
    {
        $model = new Post();
        $select = ['id', 'title', 'summary', 'label_img', 'content', 'cate_id', 'user_id', 'is_valid', 'user_name', 'created_at', 'updated_at'];

        $query = $model->find()
            ->select($select)
            ->where($cond)
            ->with('relationPostTags.tag')
            ->orderBy($orderBy);
        //zhi($query);exit;

        $res = $model->getPages($query, $curPage, $pageSize);

        $res['data'] = self::_formatList($res['data']);
        //zhi($res);

        return $res;
    }

    public static function _formatList($data)
    {
        foreach ($data as &$list) {
            $list['tags'] = [];
            if (isset($list['relationPostTags']) && !empty($list['relationPostTags'])) {
                foreach ($list['relationPostTags'] as $lt)
                    $list['tags'][] = $lt['tag']['tag_name'];
            }
            unset($list['relationPostTags']);
        }
        return $data;
    }
}